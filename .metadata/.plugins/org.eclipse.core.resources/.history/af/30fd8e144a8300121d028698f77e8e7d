package Network.FromSlave;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.HashMap;

import Exceptions.InvalidQueryException;
import Model.Query;
import Model.ResultFS;
import Network.Protocols.ProtocolResultFS;
import System.Utils;

public class ResultAnalyzer {
	
private Socket mSocket;
	
	public ResultAnalyzer(Socket client) {
		mSocket = client;
	}

	public ResultFS handleResult() {	
			
		ResultFS result = null;
		String clientQuery;
		HashMap<String, String> aMap = new HashMap<String, String>();
		boolean isSuccess = true;

		try {
			BufferedReader mInput = new BufferedReader(
					new InputStreamReader(mSocket.getInputStream()));
			DataOutputStream mOutput = new DataOutputStream(mSocket.getOutputStream());
			clientQuery = mInput.readLine();

			if (clientQuery != null
					&& clientQuery.equals(ProtocolResultFS.SLAVE_SEND_RESULT)) {

				// Go through arguments.
				for (int i = 0; i < ProtocolResultFS.CLIENT_MAX_ARG_NUMBER; i++) {
					clientQuery = mInput.readLine();
					if (clientQuery != null && !clientQuery.isEmpty()) {
						String[] line = clientQuery.split("\\"
								+ ProtocolResultFS.COMMON_SEPARATOR);
						
						// If it doesn't fit the protocol.
						if (line.length != 2) {
							isSuccess = false;
							break;
						}
						
						// Otherwise Get the arguments.
						aMap.put(line[0], line[1]);
					} else {
						// Finish! Let's start to read the file. see below.
						break;
					}
				}
			} else {
				isSuccess = false;
			}

			if (isSuccess) {
				try {
					result = new Query(aMap);
					
					char[] content = new char[result.getFileSize()];
					mInput.read(content, 0, result.getFileSize());
					
					File f = Utils.CreateFile(result.getFilePath());
					if(f == null) {
						isSuccess = false;
					}
					Utils.WriteInFile(f, content, result.getFileSize());	
					
				} catch(InvalidQueryException e) {
					isSuccess = false;
				}
				
			}
			
			if(isSuccess) {
				mOutput.writeBytes(ProtocolResultFS.MASTER_OK
						+ ProtocolResultFS.COMMON_END_LINE);
			} else {
				mOutput.writeBytes(ProtocolResultFS.MASTER_KO
						+ ProtocolResultFS.COMMON_END_LINE);
			}
			
			// Closing and quitting this client.
			mOutput.flush();
			mOutput.close();
			mInput.close();
			
			mSocket.close();
			
		} catch (IOException e) {
			//e.printStackTrace();
		}
		
		
		return result;
	}

}
