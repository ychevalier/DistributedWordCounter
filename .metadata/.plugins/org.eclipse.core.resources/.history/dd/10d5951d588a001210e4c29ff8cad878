package Application;

import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;

import Network.FromSlave.RegisterServer;
import Model.SlaveList;
import Network.FromClient.QueryServer;
import System.Config;
import System.Utils;

public class WCMasterApp {

	public static SlaveList mSlaveList = new SlaveList();

	static int mFileCounter = 0;

	public static synchronized int getFileCount() {
		return mFileCounter++;
	}

	static int mResultPortCounter = 0;

	public static synchronized int getResultPortCount() {

		return Config.RESULT_MIN_PORT_NUMBER
				+ (mResultPortCounter++ % (Config.RESULT_MAX_PORT_NUMBER - Config.RESULT_MIN_PORT_NUMBER));
	}

	public static boolean amIReady() {
		return !mSlaveList.isEmpty();
	}
	
static boolean simpleCliParser(String [] args) {
    	
    	boolean isError = false;
    	
    	if(args.length != 2) {
    		isError = true;
    	} else {	
	    	for(int x = 0; x < args.length; x++){
	    		if("-pq".equals(args[x])){
	    	    	try {
	    	            Config.MASTER_PORT = Integer.parseInt(args[x + 1]);
	    	        } catch (NumberFormatException e) {
	    	            System.out.println("Remote master port must be an integer.");
	    	            isError = true;
	    	            break;
	    	        }
	    	        x++;
	    	    }  else if("-pr".equals(args[x])){
	    	    	try {
	    	            Config.MASTER_REGISTER_PORT = Integer.parseInt(args[x + 1]);
	    	        } catch (NumberFormatException e) {
	    	            System.out.println("Remote master port must be an integer.");
	    	            isError = true;
	    	            break;
	    	        }
	    	        x++;
	    	    } else {
	    	    	isError = true;
	    	    	System.out.println("Wrong argument.");
	    	    	break;
	    	    }
	    	}
    	}

    	if(isError) {
    		System.out.println("Usage: COMMAND -f <path_of_file_to_send> -j <job_name> -ma <remote_master_ip> -mp <remote_master_port>");
    	}
    	
    	return !isError;
    }

	public static void main(String[] args) {

		System.out.println("### Master ###");

		try {
			Config.MY_IP = InetAddress.getLocalHost().toString().split("/")[1];
			if (!Utils.checkIP(Config.MY_IP)) {
				System.out.println("Unable to find host address");
				return;
			}
		} catch (UnknownHostException e) {
			// e.printStackTrace();
			System.out.println("Unable to find host address");
			return;
		}

		Thread tQ = new Thread(new QueryServer());
		tQ.start();

		Thread tR = new Thread(new RegisterServer(mSlaveList));
		tR.start();

	}

}
