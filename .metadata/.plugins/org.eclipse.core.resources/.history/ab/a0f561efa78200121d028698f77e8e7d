package Network;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.util.HashMap;

import Exceptions.InvalidQueryException;
import Exceptions.QueryProblemException;
import Model.Query;

public class QueryHandler {
	
	private Socket mSocket;
	
	public QueryHandler(Socket client) {
		mSocket = client;
	}

	public Query handleQuery() throws QueryProblemException {	
			
		Query result = null;
		String clientQuery;
		HashMap<String, String> aMap = new HashMap<String, String>();
		boolean isSuccess = true;

		try {
			BufferedReader mInput = new BufferedReader(
					new InputStreamReader(mSocket.getInputStream()));
			DataOutputStream mOutput = new DataOutputStream(mSocket.getOutputStream());
			clientQuery = mInput.readLine();

			if (clientQuery != null
					&& clientQuery.equals(Protocol.CLIENT_SEND_FILE)) {

				// Go through arguments.
				for (int i = 0; i < Protocol.CLIENT_MAX_ARG_NUMBER; i++) {
					clientQuery = mInput.readLine();
					if (clientQuery != null && !clientQuery.isEmpty()) {
						String[] line = clientQuery.split("\\"
								+ Protocol.COMMON_SEPARATOR);
						
						// If it doesn't fit the protocol.
						if (line.length != 2) {
							isSuccess = false;
							break;
						}
						
						// Otherwise Get the arguments.
						aMap.put(line[0], line[1]);
					} else {
						// Finish! Let's start to read the file. see below.
						break;
					}
				}
			} else {
				isSuccess = false;
			}

			if (isSuccess) {
				
				Query q;
				try {
					q = new Query(aMap);
					
					char[] file = new char[q.getmFileSize()];
					mInput.read(file, 0, q.getmFileSize());
					
					System.out.println("===");
					System.out.println(file);
					System.out.println("===");
					
					
					mOutput.writeBytes(Protocol.MASTER_OK
							+ Protocol.COMMON_END_LINE);
					
				} catch(InvalidQueryException e) {
					isSuccess = false;
				}

				/*
				for (Map.Entry<String, String> e : aMap.entrySet()) {
					System.out.println(e.getKey() + " --> " + e.getValue());
				}
				*/

				
			}
			
			if(!isSuccess) {
				mOutput.writeBytes(Protocol.MASTER_KO
						+ Protocol.COMMON_END_LINE);
			}
			
			// Closing and quitting this client.
			mOutput.flush();
			mOutput.close();
			mInput.close();
			
			mSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
