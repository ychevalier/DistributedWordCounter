package Network;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

import System.Config;

public class WCServer {

	private ServerSocket mServerSocket;
	private int mPort;

	public WCServer() {
		mPort = Config.MASTER_PORT;
	}

	public WCServer(int port) {
		mPort = port;
	}

	public void launch() {
		try {
			mServerSocket = new ServerSocket(mPort);
			while (true) {
				handleQuery(mServerSocket.accept());
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void handleQuery(Socket client) {
		String clientQuery;
		BufferedReader inFromClient;
		boolean isSuccess = true;
		try {
			inFromClient = new BufferedReader(new InputStreamReader(
					client.getInputStream()));

			DataOutputStream outToClient = new DataOutputStream(
					client.getOutputStream());

			HashMap<String, String> aMap = new HashMap<String, String>();

			clientQuery = inFromClient.readLine();

			if (clientQuery != null
					&& clientQuery.equals(Protocol.CLIENT_SEND_FILE)) {
				
				for (;;) {
					clientQuery = inFromClient.readLine();
					if (clientQuery != null) {
						String[] line = clientQuery.split("\\"
								+ Protocol.COMMON_SEPARATOR);
						if (line.length != 2) {
							isSuccess = false;
							break;
						}
						aMap.put(line[0], line[1]);
					} else {
						// Let's start to read the file.
						break;
					}

				}
				
				
				for (Map.Entry<String, String> e : aMap.entrySet()) {
					System.out.println(e.getKey() + " --> " + e.getValue());
				}

				outToClient.writeBytes(Protocol.MASTER_OK
						+ Protocol.COMMON_END_LINE);
			} else {
				isSuccess = false;
			}
			
			outToClient.writeBytes(Protocol.MASTER_KO
					+ Protocol.COMMON_END_LINE);

			// Closing and quitting this client.
			outToClient.flush();
			outToClient.close();
			inFromClient.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
