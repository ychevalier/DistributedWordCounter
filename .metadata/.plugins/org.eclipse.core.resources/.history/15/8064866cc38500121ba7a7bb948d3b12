package Network.ToMaster;

import java.io.File;

import Network.TCPClient;
import Network.Protocols.ProtocolResultFS;

public class Register {
	
	private boolean mIsConnected;
	private TCPClient mNetClient;
	
	public ResultSender() {
		mIsConnected = false;
		mNetClient = new TCPClient();
	}
	
	public boolean connect(String ip, int port) {
		if(!mIsConnected) {
			if(mNetClient == null || !mNetClient.connect(ip, port)) {
				return false;
			}
			mIsConnected = true;
		}
		return true;
	}
	
	public void disconnect() {
		if(mIsConnected && mNetClient != null) {
				mNetClient.disconnect();
				mIsConnected = false;
		}
	}
	
	public boolean sendResult(String ip, int port) {
		
		if(!mIsConnected) {
			return false;
		}
		
		final StringBuilder query = new StringBuilder();
		
		query.append(ProtocolRegister.SLAVE_SEND_RESULT);
		query.append(ProtocolRegister.COMMON_END_LINE);
		query.append(ProtocolRegister.SLAVE_FILE_NAME);
		query.append(ProtocolRegister.COMMON_SEPARATOR);
		query.append(fileName);
		query.append(ProtocolRegister.COMMON_END_LINE);
		query.append(ProtocolRegister.SLAVE_PART_NUMBER);
		query.append(ProtocolRegister.COMMON_SEPARATOR);
		query.append(String.valueOf(i));
		query.append(ProtocolRegister.COMMON_END_LINE);
		query.append(ProtocolRegister.COMMON_END_LINE);
		
		final StringBuilder footer = new StringBuilder(ProtocolResultFS.COMMON_END_LINE);
		
		final String response = mNetClient.sendFile(query.toString(), fileToSend, footer.toString());
		
		if(ProtocolResultFS.MASTER_OK.equals(response)) {
			return true;
		} else {
			return false;
		}
	}

}
