package Network;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.ref.WeakReference;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

public class QueryHandler implements Runnable {

	private WeakReference<Socket> mSocket;

	public QueryHandler(Socket client) {
		mSocket = new WeakReference<Socket>(client);
	}

	@Override
	public void run() {

		if(mSocket.get() == null) {
			return;
		}
		
		String clientQuery;
		HashMap<String, String> aMap = new HashMap<String, String>();
		boolean isSuccess = true;

		try {
			BufferedReader inFromClient = new BufferedReader(
					new InputStreamReader(mSocket.get().getInputStream()));
			DataOutputStream outToClient = new DataOutputStream(mSocket.get()
					.getOutputStream());

			clientQuery = inFromClient.readLine();

			if (clientQuery != null
					&& clientQuery.equals(Protocol.CLIENT_SEND_FILE)) {

				for (;;) {
					clientQuery = inFromClient.readLine();
					if (clientQuery != null && !clientQuery.isEmpty()) {
						String[] line = clientQuery.split("\\"
								+ Protocol.COMMON_SEPARATOR);
						if (line.length != 2) {
							isSuccess = false;
							break;
						}
						aMap.put(line[0], line[1]);
					} else {
						// Let's start to read the file.
						break;
					}
				}
			} else {
				isSuccess = false;
			}

			if (isSuccess) {

				// TODO Read the file!!

				for (Map.Entry<String, String> e : aMap.entrySet()) {
					System.out.println(e.getKey() + " --> " + e.getValue());
				}

				outToClient.writeBytes(Protocol.MASTER_OK
						+ Protocol.COMMON_END_LINE);
			} else {
				outToClient.writeBytes(Protocol.MASTER_KO
						+ Protocol.COMMON_END_LINE);
			}
			// Closing and quitting this client.
			outToClient.flush();
			outToClient.close();
			inFromClient.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
