package System;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.DatagramSocket;
import java.net.ServerSocket;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Utils {

	public static File CreateFile(String filepath) {
		File f = new File(filepath);
		f.mkdirs();
		try {
			f.createNewFile();
		} catch (IOException e) {
			f = null;
		}
		return f;
	}
	
	public static void WriteInFile(File file, char[] textToSave, int filesize) {

	    file.delete();
	    try {
	    	BufferedWriter out = new BufferedWriter(new FileWriter(file), filesize);
	        out.write(textToSave);
	        out.close();
	    } catch (IOException e) {
	    }
	}
	
	public static void SplitFile(String filename, String filepath, int nbSplit, String outputPath) {
		 int FRG_FSIZE=0;
		 int lsize = 1024;
		    
	        FRG_FSIZE = 1024*5;
	        File[] fileFragments = new File[noFile];
	        String[] frgfName = new String[noFile];
	            try{    
	                String sourceFName = source.getName();
	                long sourceFSize = source.length();
	                FileInputStream fis = new FileInputStream(new File(filepath));

	                String Fileinfo = new String(sourceFName + "," + String.valueOf(sourceFSize));
	                System.out.println(noFile);
	                if (lsize != 0) {
	                    noFile--;
	                }
	                System.out.println(noFile);
	                sourceFName = sourceFName.substring(0, sourceFName.lastIndexOf("."));
	                int j=0;
	                for (int i = 1; i &amp;lt;= noFile; i++) {
	                    frgfName[i-1] ="temp\\"+sourceFName + String.valueOf(i)+".splt";
	                    fileFragments[i-1] = new File(frgfName[i-1]);
	                   
	                    FileOutputStream fos = new FileOutputStream(fileFragments[i - 1]);
	                    byte[] data = new byte[FRG_FSIZE];
	                    int count = fis.read(data);
	                    fos.write(data);
	                    fos.close();
	                    String frgFileInfo = new String(frgfName[i-1] + &amp;quot;,&amp;quot; + String.valueOf(FRG_FSIZE));
	                }
	                if (lsize != 0) {                    
	                    System.out.println(noFile);
	                    frgfName[noFile] ="temp\\"+sourceFName + String.valueOf(noFile+1)+".splt";
	                    fileFragments[noFile] = new File(frgfName[noFile]);
	                    FileOutputStream fos = new FileOutputStream(fileFragments[noFile]);
	                    byte[] data = new byte[lsize];
	                    int count = fis.read(data);
	                    fos.write(data);
	                    fos.close();
	                    String frgFileInfo = new String(frgfName[noFile] + &amp;quot;,&amp;quot; + String.valueOf(lsize));
	                }

	               } catch (Exception e) {
	                      
	                   System.out.println("Error in Splitting"+e);
	                    JOptionPane.showMessageDialog(null, "Error in Splitting File \n"+e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
	                     return null;
	               }
	        return fileFragments;
	}
	
	private static final String PATTERN = "^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
			+ "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
			+ "([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\."
			+ "([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";

	public static boolean checkIP(String ip) {
		if(ip == null) {
			return false;
		} else if(ip.equals("localhost")) {
			return true;
		}
		Pattern pattern = Pattern.compile(PATTERN);
		Matcher matcher = pattern.matcher(ip);
		return matcher.matches();
	}
	
	public static boolean isAvailable(int port) {
	    if (port < Config.RESULT_MIN_PORT_NUMBER || port > Config.RESULT_MAX_PORT_NUMBER) {
	        throw new IllegalArgumentException("Invalid start port: " + port);
	    }

	    ServerSocket ss = null;
	    DatagramSocket ds = null;
	    try {
	        ss = new ServerSocket(port);
	        ss.setReuseAddress(true);
	        ds = new DatagramSocket(port);
	        ds.setReuseAddress(true);
	        return true;
	    } catch (IOException e) {
	    } finally {
	        if (ds != null) {
	            ds.close();
	        }

	        if (ss != null) {
	            try {
	                ss.close();
	            } catch (IOException e) {
	                /* should not be thrown */
	            }
	        }
	    }

	    return false;
	}
}
